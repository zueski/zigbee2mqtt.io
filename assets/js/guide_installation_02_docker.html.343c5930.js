"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[56285],{12674:(s,n,e)=>{e.r(n),e.d(n,{comp:()=>t,data:()=>l});var a=e(23785);const i={},t=(0,e(86670).A)(i,[["render",function(s,n){const e=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[n[6]||(n[6]=(0,a.Fv)('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><p>It is possible to run Zigbee2MQTT in a Docker container using the official <a href="https://hub.docker.com/r/koenkk/zigbee2mqtt/" target="_blank" rel="noopener noreferrer">Zigbee2MQTT Docker image</a>.</p><p>This image support the following architectures: <code>386</code>, <code>amd64</code>, <code>arm/v6</code>, <code>arm/v7</code>, <code>arm64</code>. Since Zigbee2MQTT images are manifest listed, Docker will auto-detect the architecture and pull the right image.</p>',3)),(0,a.Lk)("p",null,[n[1]||(n[1]=(0,a.eW)("Start by figuring out the location of your adapter as explained ")),(0,a.bF)(e,{to:"/guide/installation/01_linux.html#determine-location-of-the-adapter-and-checking-user-permissions"},{default:(0,a.k6)((()=>n[0]||(n[0]=[(0,a.eW)("here")]))),_:1}),n[2]||(n[2]=(0,a.eW)("."))]),n[7]||(n[7]=(0,a.Fv)('<p><strong>IMPORTANT</strong>: Using a Raspberry Pi? Make sure to check <a href="#notes-for-raspberry-pi-users">Notes for Raspberry Pi users</a>.</p><h2 id="creating-the-initial-configuration" tabindex="-1"><a class="header-anchor" href="#creating-the-initial-configuration"><span>Creating the initial configuration</span></a></h2><p>Navigate to the directory where you will store the Zigbee2MQTT data and execute the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">wget</span> https://raw.githubusercontent.com/Koenkk/zigbee2mqtt/master/data/configuration.yaml <span class="token parameter variable">-P</span> data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',4)),(0,a.Lk)("p",null,[n[4]||(n[4]=(0,a.eW)("Now configure the MQTT server and adapter location as explained ")),(0,a.bF)(e,{to:"/guide/installation/01_linux.html#configuring"},{default:(0,a.k6)((()=>n[3]||(n[3]=[(0,a.eW)("here")]))),_:1}),n[5]||(n[5]=(0,a.eW)("."))]),n[8]||(n[8]=(0,a.Fv)('<h2 id="running-the-container" tabindex="-1"><a class="header-anchor" href="#running-the-container"><span>Running the container</span></a></h2><p>Execute the following command, update the <code>--device</code> parameter to match the location of your adapter.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">docker</span> run <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--name</span> zigbee2mqtt <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">--device</span><span class="token operator">=</span>/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/data:/app/data <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-v</span> /run/udev:/run/udev:ro <span class="token punctuation">\\</span></span>\n<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Europe/Amsterdam <span class="token punctuation">\\</span></span>\n<span class="line">   koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parameters explanation:</strong></p><ul><li><code>--name zigbee2mqtt</code>: Name of container</li><li><code>--restart=unless-stopped</code>: Automatically start on boot and restart after a crash</li><li><code>--device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0</code>: Location of adapter (e.g. CC2531). The path before the <code>:</code> is the path on the host, the path after it is the path that is mapped to inside the container. You should always use the <code>/dev/serial/by-id/</code> path on the host.</li><li><code>-v $(pwd)/data:/app/data</code>: Directory where Zigbee2MQTT stores it configuration (pwd maps to the current working directory)</li><li><code>-v /run/udev:/run/udev:ro</code>: only required for auto-detecting the port and some adapters like ConBee</li><li><code>-e TZ=Europe/Amsterdam</code>: Configure the timezone</li><li><code>-p 8080:8080</code>: port forwarding from inside Docker container to host (for the frontend)</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you run the MQTT-Server on the same host (localhost) you could use the IP of the <code>docker0</code> bridge to establish the connection: <code>server: mqtt://172.17.0.1</code>.</p></div><h3 id="rootless-container" tabindex="-1"><a class="header-anchor" href="#rootless-container"><span>Rootless container</span></a></h3><p>To improve the security of the deployment you may want to run Zigbee2MQTT as a <em>non-root</em> user.</p><ol><li>Identify the group that has access to the adapter (in Ubuntu, e.g. it might be assigned to <code>dialout</code>). Update <code>ttyACM0</code> to match your adapter location.</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ ls -l /dev/ttyACM0</span>\n<span class="line">crw-rw---- 1 root dialout 166, 0 Nov 5 16:31 /dev/ttyACM0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>If you want to run Zigbee2MQTT using your current user find the <code>uid</code> (UserID) and <code>gid</code> (GroupID):</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ id</span>\n<span class="line">uid=1001(pi) gid=1001(pi) Groups=...</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Start the docker container after updating <code>device</code>, <code>user</code> (uid:gid) and <code>group-add</code>:</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ sudo docker run \\</span>\n<span class="line">   --name=zigbee2mqtt \\</span>\n<span class="line">   --restart=unless-stopped \\</span>\n<span class="line">   -p 8080:8080 \\</span>\n<span class="line">   -v $(pwd)/data:/app/data \\</span>\n<span class="line">   -v /run/udev:/run/udev:ro \\</span>\n<span class="line">   --device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 \\</span>\n<span class="line">   --user 1001:1001 \\</span>\n<span class="line">   --group-add dialout \\</span>\n<span class="line">   -e TZ=Europe/Amsterdam \\</span>\n<span class="line">   koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.1</p><p><strong>Parameters explanation:</strong></p><ul><li><code>--user 1001:1001</code>: Run the Zigbee2MQTT process within the container using the provided UserID and GroupID</li><li><code>--group-add dialout</code>: Assign the <code>dialout</code> group to the user to be able to access the device</li></ul><h3 id="rootless-with-podman-3-2" tabindex="-1"><a class="header-anchor" href="#rootless-with-podman-3-2"><span>Rootless with Podman (&gt;3.2)</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ podman run \\</span>\n<span class="line">   --name=zigbee2mqtt \\</span>\n<span class="line">   --restart=unless-stopped \\</span>\n<span class="line">   -p 8080:8080 \\</span>\n<span class="line">   -v $(pwd)/data:/app/data \\</span>\n<span class="line">   -v /run/udev:/run/udev:ro \\</span>\n<span class="line">   --device=/dev/serial/by-id/usb-Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF-if00:/dev/ttyACM0 \\</span>\n<span class="line">   --group-add keep-groups \\</span>\n<span class="line">   -e TZ=Europe/Amsterdam \\</span>\n<span class="line">   koenkk/zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="updating" tabindex="-1"><a class="header-anchor" href="#updating"><span>Updating</span></a></h2><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> pull koenkk/zigbee2mqtt:latest</span>\n<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> zigbee2mqtt</span>\n<span class="line"><span class="token comment"># Now run the container again with the instructions above</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tags" tabindex="-1"><a class="header-anchor" href="#tags"><span>Tags</span></a></h2><p>The following tags are available:</p><ul><li>Latest release version: <code>latest</code></li><li>Latest dev version (based on <a href="https://github.com/Koenkk/zigbee2mqtt/tree/dev" target="_blank" rel="noopener noreferrer"><code>dev</code></a> branch): <code>latest-dev</code></li><li>Specific release version, e.g: <code>1.7.0</code></li></ul><h2 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker Compose</span></a></h2><p>Example of a Docker Compose file:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span></span>\n<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token key atrule">zigbee2mqtt</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zigbee2mqtt</span>\n<span class="line">        <span class="token key atrule">image</span><span class="token punctuation">:</span> koenkk/zigbee2mqtt</span>\n<span class="line">        <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped</span>\n<span class="line">        <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/app/data</span>\n<span class="line">            <span class="token punctuation">-</span> /run/udev<span class="token punctuation">:</span>/run/udev<span class="token punctuation">:</span>ro</span>\n<span class="line">        <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token comment"># Frontend port</span></span>\n<span class="line">            <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span></span>\n<span class="line">        <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token punctuation">-</span> TZ=Europe/Berlin</span>\n<span class="line">        <span class="token key atrule">devices</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token comment"># Make sure this matched your adapter location</span></span>\n<span class="line">            <span class="token punctuation">-</span> /dev/serial/by<span class="token punctuation">-</span>id/usb<span class="token punctuation">-</span>Texas_Instruments_TI_CC2531_USB_CDC___0X00124B0018ED3DDF<span class="token punctuation">-</span>if00<span class="token punctuation">:</span>/dev/ttyACM0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also run a rootless container with Docker Compose by adding the required attributes to the <code>zigbee2mqtt</code> service block in your <code>docker-compose.yml</code>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">group_add</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token punctuation">-</span> dialout</span>\n<span class="line"><span class="token key atrule">user</span><span class="token punctuation">:</span> 1000<span class="token punctuation">:</span><span class="token number">1000</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="starting-the-container" tabindex="-1"><a class="header-anchor" href="#starting-the-container"><span>Starting the container</span></a></h3><p>To start the Docker container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will start all containers listed in the compose file.</p><h3 id="updating-1" tabindex="-1"><a class="header-anchor" href="#updating-1"><span>Updating</span></a></h3><p>To update to the latest Docker image:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> compose pull zigbee2mqtt</span>\n<span class="line"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span> zigbee2mqtt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can optionally skip <code>zigbee2mqtt</code> and it will pull any new images for all containers in the compose file, and then restart those that were updated.</p><h2 id="notes-for-raspberry-pi-users" tabindex="-1"><a class="header-anchor" href="#notes-for-raspberry-pi-users"><span>Notes for Raspberry Pi users</span></a></h2><ul><li>If you are running Raspbian Buster (not Bullseye nor Bookworm!) (find out by executing <code>grep &quot;PRETTY_NAME&quot; /etc/os-release</code>) you need to install <code>libseccomp2</code>, this can be done by executing the following commands:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> hkps://keyserver.ubuntu.com:443 --recv-keys 04EE7237B7D453EC 648ACFD622F3D138</span>\n<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;deb http://httpredir.debian.org/debian buster-backports main contrib non-free&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token string">&quot;/etc/apt/sources.list.d/debian-backports.list&quot;</span></span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libseccomp2 <span class="token parameter variable">-t</span> buster-backports</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you do not do this you will get the following error when starting the Zigbee2MQTT container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#</span></span>\n<span class="line"><span class="token comment"># Fatal error in , line 0</span></span>\n<span class="line"><span class="token comment"># unreachable code</span></span>\n<span class="line"><span class="token comment">#</span></span>\n<span class="line"><span class="token comment">#</span></span>\n<span class="line"><span class="token comment">#</span></span>\n<span class="line"><span class="token comment">#FailureMessage Object: 0x7eace25c</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>For Raspberry Pi 1 and zero users: there is a bug in Docker which selects the wrong image architecture. Before executing <code>docker run</code> pull the correct image with <code>docker pull koenkk/zigbee2mqtt --platform linux/arm/v6</code>.</li></ul><h2 id="docker-stack-device-mapping" tabindex="-1"><a class="header-anchor" href="#docker-stack-device-mapping"><span>Docker Stack device mapping</span></a></h2><p><em>This is only relevant when using Docker Stack</em></p><p>Docker stack doesn&#39;t support device mappings with option <code>--devices</code> when deploying a stack in swarm mode. There are two solutions to this. Both of these solutions start with binding the devices as volumes.</p><h3 id="automatic-device-mapping-for-cgroup-v1-and-v2" tabindex="-1"><a class="header-anchor" href="#automatic-device-mapping-for-cgroup-v1-and-v2"><span>Automatic device mapping for cgroup v1 and v2</span></a></h3><p>The easiest solution for enabling devices on Docker Stacks is the <a href="https://github.com/allfro/device-mapping-manager" target="_blank" rel="noopener noreferrer">allfro device-mapping-manager docker image</a>. This container has a tiny program that reads all of the volume mounts on its own host, identifies devices, and then modifies the permissions on the host to allow the container to use them. Unlike other solutions, this works for both versions of cgroups.</p><p>This container has to be deployed directly to docker, not through a stack. It&#39;s possible to work around this by creating a stack with a privileged service that acts as a proxy to launch the actual device mapper container.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token key atrule">dmm</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker</span>\n<span class="line">        <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> docker</span>\n<span class="line">        <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped</span>\n<span class="line">        <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>\n<span class="line">        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>\n<span class="line">            run</span>\n<span class="line">            -i</span>\n<span class="line">            --rm</span>\n<span class="line">            --privileged</span>\n<span class="line">            --cgroupns=host</span>\n<span class="line">            --pid=host</span>\n<span class="line">            --userns=host</span>\n<span class="line">            -v /sys:/host/sys</span>\n<span class="line">            -v /var/run/docker.sock:/var/run/docker.sock</span>\n<span class="line">            -v /dev:/dev</span>\n<span class="line">            ghcr.io/allfro/allfro/device-mapping-manager:latest</span></span>\n<span class="line">        <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock</span>\n<span class="line">        <span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token key atrule">mode</span><span class="token punctuation">:</span> global</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manual-cgroup-v1" tabindex="-1"><a class="header-anchor" href="#manual-cgroup-v1"><span>Manual cgroup v1</span></a></h3><p>A workaround is to manually set the right permissions. The workaround is based on the solution found at <a href="https://github.com/docker/swarmkit/issues/1244#issuecomment-285935430" target="_blank" rel="noopener noreferrer">Add support for devices with &quot;service create&quot;</a>, all credits goes this him.</p><p>This workaround only works with cgroup v1, which is not enabled on many newer distro releases.</p><ol><li><p>Identify serial adapter Identify the serial adapter using the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> lsusb <span class="token parameter variable">-v</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Bus 001 Device 005: ID 0451:16a8 Texas Instruments, Inc.</span>\n<span class="line">Device Descriptor:</span>\n<span class="line">  bLength                18</span>\n<span class="line">  bDescriptorType         1</span>\n<span class="line">  bcdUSB               2.00</span>\n<span class="line">  bDeviceClass            2 Communications</span>\n<span class="line">  bDeviceSubClass         0</span>\n<span class="line">  bDeviceProtocol         0</span>\n<span class="line">  bMaxPacketSize0        32</span>\n<span class="line">  idVendor           0x0451 Texas Instruments, Inc.</span>\n<span class="line">  idProduct          0x16a8</span>\n<span class="line">  bcdDevice            0.09</span>\n<span class="line">  iManufacturer           1 Texas Instruments</span>\n<span class="line">  iProduct                2 TI CC2531 USB CDC</span>\n<span class="line">  iSerial                 3 __0X00124B001936AC60</span>\n<span class="line">  bNumConfigurations      1</span>\n<span class="line">  Configuration Descriptor:</span>\n<span class="line">\tbLength                 9</span>\n<span class="line">\tbDescriptorType         2</span>\n<span class="line">\twTotalLength           67</span>\n<span class="line">\tbNumInterfaces          2</span>\n<span class="line">\tbConfigurationValue     1</span>\n<span class="line">\tiConfiguration          0</span>\n<span class="line">\tbmAttributes         0x80</span>\n<span class="line">\t  (Bus Powered)</span>\n<span class="line">\tMaxPower               50mA</span>\n<span class="line">\tInterface Descriptor:</span>\n<span class="line">\t  bLength                 9</span>\n<span class="line">\t  bDescriptorType         4</span>\n<span class="line">\t  bInterfaceNumber        0</span>\n<span class="line">\t  bAlternateSetting       0</span>\n<span class="line">\t  bNumEndpoints           1</span>\n<span class="line">\t  bInterfaceClass         2 Communications</span>\n<span class="line">\t  bInterfaceSubClass      2 Abstract (modem)</span>\n<span class="line">\t  bInterfaceProtocol      1 AT-commands (v.25ter)</span>\n<span class="line">\t  iInterface              0</span>\n<span class="line">\t  CDC Header:</span>\n<span class="line">\t\tbcdCDC               1.10</span>\n<span class="line">\t  CDC ACM:</span>\n<span class="line">\t\tbmCapabilities       0x02</span>\n<span class="line">\t\t  line coding and serial state</span>\n<span class="line">\t  CDC Union:</span>\n<span class="line">\t\tbMasterInterface        0</span>\n<span class="line">\t\tbSlaveInterface         1</span>\n<span class="line">\t  CDC Call Management:</span>\n<span class="line">\t\tbmCapabilities       0x00</span>\n<span class="line">\t\tbDataInterface          1</span>\n<span class="line">\t  Endpoint Descriptor:</span>\n<span class="line">\t\tbLength                 7</span>\n<span class="line">\t\tbDescriptorType         5</span>\n<span class="line">\t\tbEndpointAddress     0x82  EP 2 IN</span>\n<span class="line">\t\tbmAttributes            3</span>\n<span class="line">\t\t  Transfer Type            Interrupt</span>\n<span class="line">\t\t  Synch Type               None</span>\n<span class="line">\t\t  Usage Type               Data</span>\n<span class="line">\t\twMaxPacketSize     0x0040  1x 64 bytes</span>\n<span class="line">\t\tbInterval              64</span>\n<span class="line">\tInterface Descriptor:</span>\n<span class="line">\t  bLength                 9</span>\n<span class="line">\t  bDescriptorType         4</span>\n<span class="line">\t  bInterfaceNumber        1</span>\n<span class="line">\t  bAlternateSetting       0</span>\n<span class="line">\t  bNumEndpoints           2</span>\n<span class="line">\t  bInterfaceClass        10 CDC Data</span>\n<span class="line">\t  bInterfaceSubClass      0 Unused</span>\n<span class="line">\t  bInterfaceProtocol      0</span>\n<span class="line">\t  iInterface              0</span>\n<span class="line">\t  Endpoint Descriptor:</span>\n<span class="line">\t\tbLength                 7</span>\n<span class="line">\t\tbDescriptorType         5</span>\n<span class="line">\t\tbEndpointAddress     0x84  EP 4 IN</span>\n<span class="line">\t\tbmAttributes            2</span>\n<span class="line">\t\t  Transfer Type            Bulk</span>\n<span class="line">\t\t  Synch Type               None</span>\n<span class="line">\t\t  Usage Type               Data</span>\n<span class="line">\t\twMaxPacketSize     0x0040  1x 64 bytes</span>\n<span class="line">\t\tbInterval               0</span>\n<span class="line">\t  Endpoint Descriptor:</span>\n<span class="line">\t\tbLength                 7</span>\n<span class="line">\t\tbDescriptorType         5</span>\n<span class="line">\t\tbEndpointAddress     0x04  EP 4 OUT</span>\n<span class="line">\t\tbmAttributes            2</span>\n<span class="line">\t\t  Transfer Type            Bulk</span>\n<span class="line">\t\t  Synch Type               None</span>\n<span class="line">\t\t  Usage Type               Data</span>\n<span class="line">\t\twMaxPacketSize     0x0040  1x 64 bytes</span>\n<span class="line">\t\tbInterval               0</span>\n<span class="line">Device Status:     0x0000</span>\n<span class="line">  (Bus Powered)</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>UDEV Rules</p><p>Create a new udev rule for serial adapter, <code>idVendor</code> and <code>idProduct</code> must be equal to values from <code>lsusb</code> command. The rule below creates device <code>/dev/zigbee-serial</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;SUBSYSTEM==<span class="token entity" title="\\&quot;">\\&quot;</span>tty<span class="token entity" title="\\&quot;">\\&quot;</span>, ATTRS{idVendor}==<span class="token entity" title="\\&quot;">\\&quot;</span>0451<span class="token entity" title="\\&quot;">\\&quot;</span>, ATTRS{idProduct}==<span class="token entity" title="\\&quot;">\\&quot;</span>16a8<span class="token entity" title="\\&quot;">\\&quot;</span>, SYMLINK+=<span class="token entity" title="\\&quot;">\\&quot;</span>zigbee-serial<span class="token entity" title="\\&quot;">\\&quot;</span>,  RUN+=<span class="token entity" title="\\&quot;">\\&quot;</span>/usr/local/bin/docker-setup-zigbee-serial.sh<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/udev/rules.d/99-zigbee-serial.rules</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Reload newly created rule using the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> udevadm control --reload-rules</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Create docker-setup-zigbee-serial.sh</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/bin/docker-setup-zigbee-serial.sh</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Copy the following content:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>\n<span class="line"><span class="token assign-left variable">USBDEV</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>readlink <span class="token parameter variable">-f</span> /dev/zigbee-serial<span class="token variable">`</span></span></span>\n<span class="line"><span class="token builtin class-name">read</span> minor major <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">stat</span> <span class="token parameter variable">-c</span> <span class="token string">&#39;%T %t&#39;</span> <span class="token variable">$USBDEV</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$minor</span> <span class="token operator">||</span> <span class="token parameter variable">-z</span> <span class="token variable">$major</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>\n<span class="line">\t<span class="token builtin class-name">echo</span> <span class="token string">&#39;Device not found&#39;</span></span>\n<span class="line">\t<span class="token builtin class-name">exit</span></span>\n<span class="line"><span class="token keyword">fi</span></span>\n<span class="line"><span class="token assign-left variable">dminor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">0</span>x${minor}<span class="token variable">))</span></span></span>\n<span class="line"><span class="token assign-left variable">dmajor</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token number">0</span>x${major}<span class="token variable">))</span></span></span>\n<span class="line"><span class="token assign-left variable">CID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> --no-trunc <span class="token operator">|</span> <span class="token function">grep</span> koenkk/zigbee2mqtt <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span>  <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">`</span></span></span>\n<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$CID</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>\n<span class="line">\t<span class="token builtin class-name">echo</span> <span class="token string">&#39;CID not found&#39;</span></span>\n<span class="line">\t<span class="token builtin class-name">exit</span></span>\n<span class="line"><span class="token keyword">fi</span></span>\n<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;Setting permissions&#39;</span></span>\n<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;c <span class="token variable">$dmajor</span>:<span class="token variable">$dminor</span> rwm&quot;</span> <span class="token operator">&gt;</span> /sys/fs/cgroup/devices/docker/<span class="token variable">$CID</span>/devices.allow</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set permissions:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /usr/local/bin/docker-setup-zigbee-serial.sh</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Create docker-event-listener.sh</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/bin/docker-event-listener.sh</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Copy the following content:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>\n<span class="line"><span class="token function">docker</span> events <span class="token parameter variable">--filter</span> <span class="token string">&#39;event=start&#39;</span><span class="token operator">|</span> <span class="token punctuation">\\</span></span>\n<span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span></span>\n<span class="line">\t/usr/local/bin/docker-setup-zigbee-serial.sh</span>\n<span class="line"><span class="token keyword">done</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set permissions:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /usr/local/bin/docker-event-listener.sh</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Create docker-event-listener.service</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/systemd/system/docker-event-listener.service</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Copy the following content:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span></span>\n<span class="line"><span class="token assign-left variable">Description</span><span class="token operator">=</span>Docker Event Listener <span class="token keyword">for</span> Zigbee serial adapter</span>\n<span class="line"><span class="token assign-left variable">After</span><span class="token operator">=</span>network.target</span>\n<span class="line"><span class="token assign-left variable">StartLimitIntervalSec</span><span class="token operator">=</span><span class="token number">0</span></span>\n<span class="line"><span class="token punctuation">[</span>Service<span class="token punctuation">]</span></span>\n<span class="line"><span class="token assign-left variable">Type</span><span class="token operator">=</span>simple</span>\n<span class="line"><span class="token assign-left variable">Restart</span><span class="token operator">=</span>always</span>\n<span class="line"><span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">1</span></span>\n<span class="line"><span class="token assign-left variable">User</span><span class="token operator">=</span>root</span>\n<span class="line"><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/bin/bash /usr/local/bin/docker-event-listener.sh</span>\n<span class="line"></span>\n<span class="line"><span class="token punctuation">[</span>Install<span class="token punctuation">]</span></span>\n<span class="line"><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set permissions:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">744</span> /etc/systemd/system/docker-event-listener.service</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Reload daemon</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl daemon-reload</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Start Docker event listener</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl start docker-event-listener.service</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Status Docker event listener</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl status docker-event-listener.service</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Enable Docker event listener</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker-event-listener.service</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Verify and deploy Zigbee2MQTT stack</p><p>Now reconnect the serial adapter. Verify using the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ls</span> <span class="token parameter variable">-al</span> /dev/zigbee-serial</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">7</span> Sep <span class="token number">28</span> <span class="token number">21</span>:14 /dev/zigbee-serial -<span class="token operator">&gt;</span> ttyACM0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Below an example of a <code>docker-stack-zigbee2mqtt.yml</code>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.7&quot;</span></span>\n<span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>\n<span class="line">  <span class="token key atrule">zigbee2mqtt</span><span class="token punctuation">:</span></span>\n<span class="line">\t<span class="token key atrule">image</span><span class="token punctuation">:</span> koenkk/zigbee2mqtt<span class="token punctuation">:</span>latest<span class="token punctuation">-</span>dev</span>\n<span class="line">\t<span class="token key atrule">environment</span><span class="token punctuation">:</span></span>\n<span class="line">\t  <span class="token punctuation">-</span> TZ=Europe/Amsterdam</span>\n<span class="line">\t<span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>\n<span class="line">\t  <span class="token punctuation">-</span> /mnt/docker<span class="token punctuation">-</span>cluster/zigbee2mqtt/data<span class="token punctuation">:</span>/app/data</span>\n<span class="line">\t  <span class="token punctuation">-</span> /dev/zigbee<span class="token punctuation">-</span>serial<span class="token punctuation">:</span>/dev/zigbee<span class="token punctuation">-</span>serial</span>\n<span class="line">\t<span class="token key atrule">networks</span><span class="token punctuation">:</span></span>\n<span class="line">\t  <span class="token punctuation">-</span> proxy_traefik<span class="token punctuation">-</span>net</span>\n<span class="line">\t<span class="token key atrule">deploy</span><span class="token punctuation">:</span></span>\n<span class="line">\t  <span class="token key atrule">placement</span><span class="token punctuation">:</span></span>\n<span class="line">\t\t<span class="token key atrule">constraints</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>node.hostname == rpi<span class="token punctuation">-</span><span class="token number">3</span><span class="token punctuation">]</span></span>\n<span class="line">\t  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>\n<span class="line"></span>\n<span class="line"><span class="token key atrule">networks</span><span class="token punctuation">:</span></span>\n<span class="line">  <span class="token key atrule">proxy_traefik-net</span><span class="token punctuation">:</span></span>\n<span class="line">\t<span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, <code>proxy_traefik-net</code> is the network to connect to the mqtt broker. The constraint makes sure Docker deploys only to this (<code>rpi-3</code>) node, where the serial adapter is connected to. The volume binding <code>/mnt/docker-cluster/zigbee2mqtt/data</code> is the zigbee2mqtt persistent directory, where <code>configuration.yaml</code> is saved.</p><p>The Zigbee2MQTT <code>configuration.yaml</code> should point to <code>/dev/zigbee-serial</code>:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span></span>\n<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> /dev/zigbee<span class="token punctuation">-</span>serial</span>\n<span class="line"><span class="token punctuation">[</span><span class="token punctuation">...</span><span class="token punctuation">]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Deploy the stack:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> stack deploy zigbee2mqtt --compose-file docker-stack-zigbee2mqtt.yml</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting"><span>Troubleshooting</span></a></h3><p>It could happen that even after the above the container is not starting correctly and bringing a &quot;Operation not permitted&quot; message in the log of the service for the device:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Error: Error while opening serialport &#39;Error: Error: Operation not permitted, cannot open /dev/zigbee-serial&#39;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This is due to the usage of cgroupv2 instead of cgroupv1 which is not fully supported by docker/containerd. To switch from cgroupv2 to cgroupv1 you have to add <code>systemd.unified_cgroup_hierarchy=false</code> to the grub cmdline. E.g. on an Raspberry Pi 4 with Raspian Bullseye you can add it to the end of the line in the /boot/cmdline.txt file:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[...] rootfstype=ext4 fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 systemd.unified_cgroup_hierarchy=false</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="docker-on-synology-dsm-7-0" tabindex="-1"><a class="header-anchor" href="#docker-on-synology-dsm-7-0"><span>Docker on Synology DSM 7.0</span></a></h2><blockquote><p><strong><em>NOTE:</em></strong> This may not work with all Zigbee controllers, but has been tested with the CC2531.</p></blockquote><p>As of Disk Station Manager version 7, Synology removed the built-in support for USB-devices like a Zigbee controller. The USB support can be installed to the Linux kernel by issuing the following commands as <em>root</em>.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">modprobe usbserial</span>\n<span class="line">modprobe ftdi_sio</span>\n<span class="line">modprobe cdc-acm</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After issuing the commands, the Zigbee controller may need to be unplugged and re-inserted to the USB port.</p><p>You may also need additional drivers based on your USB Zigbee controller setup, e.g. CH341 module is not included by default. You can download precompiled modules from jadahl.com pages - select module directory based on NAS CPU architecture (DS218+ -&gt; INTEL Celeron J3355 -&gt; Apollo Lake).</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cd /lib/modules</span>\n<span class="line">wget http://www.jadahl.com/iperf-arp-scan/DSM_7.0/apollolake/ch341.ko</span>\n<span class="line">insmod /lib/modules/ch341.ko</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is possible to create a start-up task that issues the above commands:</p><ol><li>Create an executable script file that contains the three modprobe commands.</li><li>Using DSM&#39;s <em>Control Panel</em> -&gt; <em>Task Scheduler</em> -&gt; <em>Create</em> -&gt; <em>Triggered Task</em> -&gt; <em>User-defined script</em> with the settings: <strong>User:</strong> root, <strong>Event:</strong> Boot-up, and a <code>bash</code> command executing the executable file under <em>Task Settings</em>.</li></ol>',69))])}]]),l=JSON.parse('{"path":"/guide/installation/02_docker.html","title":"Docker","lang":"en-US","frontmatter":{"pageClass":"content-page","next":"../configuration/"},"headers":[{"level":2,"title":"Creating the initial configuration","slug":"creating-the-initial-configuration","link":"#creating-the-initial-configuration","children":[]},{"level":2,"title":"Running the container","slug":"running-the-container","link":"#running-the-container","children":[{"level":3,"title":"Rootless container","slug":"rootless-container","link":"#rootless-container","children":[]},{"level":3,"title":"Rootless with Podman (>3.2)","slug":"rootless-with-podman-3-2","link":"#rootless-with-podman-3-2","children":[]}]},{"level":2,"title":"Updating","slug":"updating","link":"#updating","children":[]},{"level":2,"title":"Tags","slug":"tags","link":"#tags","children":[]},{"level":2,"title":"Docker Compose","slug":"docker-compose","link":"#docker-compose","children":[{"level":3,"title":"Starting the container","slug":"starting-the-container","link":"#starting-the-container","children":[]},{"level":3,"title":"Updating","slug":"updating-1","link":"#updating-1","children":[]}]},{"level":2,"title":"Notes for Raspberry Pi users","slug":"notes-for-raspberry-pi-users","link":"#notes-for-raspberry-pi-users","children":[]},{"level":2,"title":"Docker Stack device mapping","slug":"docker-stack-device-mapping","link":"#docker-stack-device-mapping","children":[{"level":3,"title":"Automatic device mapping for cgroup v1 and v2","slug":"automatic-device-mapping-for-cgroup-v1-and-v2","link":"#automatic-device-mapping-for-cgroup-v1-and-v2","children":[]},{"level":3,"title":"Manual cgroup v1","slug":"manual-cgroup-v1","link":"#manual-cgroup-v1","children":[]},{"level":3,"title":"Troubleshooting","slug":"troubleshooting","link":"#troubleshooting","children":[]}]},{"level":2,"title":"Docker on Synology DSM 7.0","slug":"docker-on-synology-dsm-7-0","link":"#docker-on-synology-dsm-7-0","children":[]}],"git":{"updatedTime":1727204311000},"filePathRelative":"guide/installation/02_docker.md"}')}}]);